# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gTRqjKCdfM5YZAo89N_4TisY_hAvZtmq
"""

import streamlit as st
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Load data
heart_data = pd.read_csv('heart_disease_data.csv')  # Make sure this file is in the same folder

# Prepare features and labels
X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

# Train-test split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, Y_train)

# Streamlit UI
st.title('Heart Disease Prediction App')
st.write('Enter the medical details below:')

# Input fields
age = st.number_input('Age', min_value=1, max_value=120, value=60)
sex = st.selectbox('Sex (0 = Female, 1 = Male)', [0, 1])
cp = st.selectbox('Chest Pain Type (0-3)', [0, 1, 2, 3])
trestbps = st.number_input('Resting Blood Pressure (mm Hg)', min_value=50, max_value=300, value=120)
chol = st.number_input('Serum Cholesterol (mg/dl)', min_value=100, max_value=600, value=200)
fbs = st.selectbox('Fasting Blood Sugar > 120 mg/dl (1 = True; 0 = False)', [0, 1])
restecg = st.selectbox('Resting ECG Results (0-2)', [0, 1, 2])
thalach = st.number_input('Max Heart Rate Achieved', min_value=50, max_value=250, value=150)
exang = st.selectbox('Exercise Induced Angina (1 = Yes; 0 = No)', [0, 1])
oldpeak = st.number_input('ST Depression Induced by Exercise', value=1.0)
slope = st.selectbox('Slope of the Peak Exercise ST Segment (0-2)', [0, 1, 2])
ca = st.selectbox('Number of Major Vessels Colored by Fluoroscopy (0-3)', [0, 1, 2, 3])
thal = st.selectbox('Thalassemia (1 = Normal; 2 = Fixed Defect; 3 = Reversible Defect)', [1, 2, 3])

# Predict button
if st.button('Predict'):
    input_data = (age, sex, cp, trestbps, chol, fbs, restecg,
                  thalach, exang, oldpeak, slope, ca, thal)

    input_data_np = np.asarray(input_data).reshape(1, -1)
    input_data_scaled = scaler.transform(input_data_np)
    prediction = model.predict(input_data_scaled)

    if prediction[0] == 0:
        st.success('✅ No Heart Disease Detected')
    else:
        st.error('⚠️ Heart Disease Detected')

# Optional: Show model accuracy
if st.checkbox("Show Model Accuracy"):
    X_train_pred = model.predict(X_train)
    X_test_pred = model.predict(X_test)
    st.write(f"Training Accuracy: {accuracy_score(Y_train, X_train_pred):.2f}")
    st.write(f"Testing Accuracy: {accuracy_score(Y_test, X_test_pred):.2f}")